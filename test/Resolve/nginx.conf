# this nginx configuration file is for demonstration purpose only

user                    nginx;
worker_processes        4;

events {
    worker_connections  1024;
}

error_log               /tmp/nginx-test-upconf-error.log notice;

http {
    default_type        application/octet-stream;
    sendfile            on;

    error_log           /tmp/nginx-test-upconf-error.log notice;
    access_log          /tmp/nginx-test-upconf-access.log;

    upstream utest {
        zone utest 64k;
        upconf_round_robin;
        server localhost:9000;
    }

   upstream utest1 {
       zone utest1 64k;
       upconf_round_robin;
       server localhost:9000;
   }

#    upstrand utest {
#        upstream utest;
#        upstream utest1;
#        order per_request;
#        next_upstream_statuses error timeout 5xx;
#        next_upstream_timeout 60s;
#    }

    upstream utest_srv {
        zone utest_srv 64k;
        upconf_round_robin;
        server localhost:9000;
    }

    upstream utest1_srv {
        zone utest1_srv 64k;
        upconf_round_robin;
        server localhost:9000;
    }

    haskell load /var/lib/nginx/test_tools_extra_resolve.so;

    haskell_run_service simpleService_collectUpstreams $hs_upstreams
        'Conf { upstreams =
                    [UData { uQuery =
                                 QueryA
                                     (WeightedList
                                         [(Name "www.resolve.test:8020", 2)
                                         ,(Name "www.resolve1.test:8030", 1)
                                         ]
                                     ) (PriorityList ["utest", "utest1"])
                           , uMaxFails = 1
                           , uFailTimeout = 10
                           }
                    ,UData { uQuery =
                                 QuerySRV
                                     (Name "_http._tcp.resolve.test")
                                         (SinglePriority "utest_srv")
                           , uMaxFails = 1
                           , uFailTimeout = 10
                           }
                    ]
              , maxWait = Sec 300
              , waitOnException = Sec 2
              , responseTimeout = Unset
              }';

#     haskell_run_service simpleService_collectUpstreams $hs_upstreams
#         'Conf { upstreams =
#                     [UData { uQuery =
#                                  QueryA
#                                      (WeightedList
#                                          [(Name "www.resolve.test:8020", 2)
#                                          ,(Name "www.resolve1.test:8030", 1)
#                                          ]
#                                      ) (PriorityList ["utest", "utest1"])
#                            , uMaxFails = 1
#                            , uFailTimeout = 10
#                            }
#                     ,UData { uQuery =
#                                  QuerySRV
#                                      (Name "_http._tcp.resolve.test")
#                                          (PriorityList
#                                              ["utest_srv", "utest1_srv"]
#                                          )
#                            , uMaxFails = 1
#                            , uFailTimeout = 10
#                            }
#                     ]
#               , maxWait = Sec 300
#               , waitOnException = Sec 2
#               , responseTimeout = Unset
#               }';

    haskell_service_var_ignore_empty $hs_upstreams;
    haskell_service_var_in_shm upstreams 64k /tmp $hs_upstreams;

    haskell_service_var_update_callback simpleService_signalUpconf
        $hs_upstreams '["http://127.0.0.1:8010/upconf"]';

    server {
        listen          127.0.0.1:8010;
        server_name     main;

        location /upconf {
            upconf $hs_upstreams;

            allow 127.0.0.1;
            deny  all;
        }

        location /upstreams {
            default_type application/json;
            echo $hs_upstreams;

            allow 127.0.0.1;
            deny  all;
        }

        location /utest {
            proxy_pass http://utest;
        }

        location /utest1 {
            proxy_pass http://utest1;
        }

        location /utest_srv {
            proxy_pass http://utest_srv;
        }

        location /utest1_srv {
            proxy_pass http://utest1_srv;
        }

#         location /upstrand {
#             proxy_pass http://$upstrand_utest;
#         }
    }

    server {
        listen          127.0.0.1:9000;
        server_name     backend9000;

        location / {
            echo_status 503;
            echo "Not configured";
        }
    }

    server {
        listen          127.0.0.2:8020;
        server_name     www.resolve.test;

        location / {
            echo "In www.resolve.test";
        }
    }

    server {
        listen          127.0.0.3:8030;
        server_name     www.resolve1.test;

        location / {
            echo "In www.resolve1.test";
        }
    }
}

# vim: ft=nginx
