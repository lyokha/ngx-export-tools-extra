# this nginx configuration file is for demonstration purpose only

user                    nginx;
worker_processes        4;

events {
    worker_connections  1024;
}

error_log               /tmp/nginx-test-upconf-error.log notice;

http {
    default_type        application/octet-stream;
    sendfile            on;

    error_log           /tmp/nginx-test-upconf-error.log notice;
    access_log          /tmp/nginx-test-upconf-access.log;

    upstream utest {
        zone utest 64k;
        upconf_round_robin;
        server localhost:9000;
    }

    upstream utest_hash {
        zone utest_hash 64k;
        upconf_hash $arg_a consistent;
        server localhost:9000;
    }

#    upstrand utest {
#        upstream utest;
#        upstream utest_hash;
#        order per_request;
#        next_upstream_statuses error timeout 5xx;
#        next_upstream_timeout 60s;
#    }

    haskell load /var/lib/nginx/test_tools_extra_resolve.so;

    haskell_run_service simpleService_collectUpstreams $hs_upstreams
        'Conf { upstreams =
                    [UData { upstream =
                                 QuerySRV
                                     (SinglePriority "utest"
                                         (Name "_http._tcp.pkg.freebsd.org")
                                     )
                           , uMaxFails = 0
                           , uFailTimeout = 10
                           }
                    ]
              , maxWait = Sec 300
              , waitOnException = Sec 2
              }';

#    haskell_run_service simpleService_collectUpstreams $hs_upstreams
#        'Conf { upstreams =
#                    [UData { upstream =
#                                 QuerySRV
#                                     (PriorityList ["utest", "utest_hash"]
#                                         (Name "_http._tcp.pkg.freebsd.org")
#                                     )
#                           , uMaxFails = 0
#                           , uFailTimeout = 10
#                           }
#                    ]
#              , maxWait = Sec 300
#              , waitOnException = Sec 2
#              }';

    haskell_service_var_ignore_empty $hs_upstreams;
    haskell_service_var_in_shm upstreams 64k /tmp $hs_upstreams;

    haskell_service_var_update_callback simpleService_signalUpconf $hs_upstreams
        'Upconf { upconfAddr = ("/upconf", "127.0.0.1:8010")
                }';

    server {
        listen          localhost:8010;
        server_name     main;

        location /upconf {
            upconf $hs_upstreams;

            allow 127.0.0.1;
            deny  all;
        }

        location /upstreams {
            echo $hs_upstreams;

            allow 127.0.0.1;
            deny  all;
        }

        location / {
            proxy_pass http://utest;
        }

        location /hash {
            proxy_pass http://utest_hash;
        }

#        location /upstrand {
#            proxy_pass http://$upstrand_utest;
#        }
    }

    server {
        listen          localhost:9000;
        server_name     backend9000;

        location / {
            echo_status 503;
            echo "Not configured";
        }
    }
}

# vim: ft=nginx
